# from flask import Flask, request
# from telegram import Update, Bot
# from telegram.ext import (
#     ApplicationBuilder,
#     CommandHandler,
#     MessageHandler,
#     filters,
#     ConversationHandler,
#     ContextTypes
# )
# import logging
# import os

# # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# logging.basicConfig(
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#     level=logging.INFO
# )
# logger = logging.getLogger(__name__)

# # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
# (
#     CHOOSING,
#     ORDER_TRANSPORT_OR_TRACK_SHIPMENT_OR_REQUEST_RATES_OR_FAQ_OR_FEEDBACK,
#     ORDER_TRANSPORT_OR_TRACK_SHIPMENT_OR_REQUEST_RATES_OR_FEEDBACK,
#     ORDER_OR_TRACK_OR_RATES,
#     ORDER_DETAILS,
#     TRACK_DETAILS,
#     RATES_DETAILS,
#     FEEDBACK_DETAILS
# ) = range(8)

# app_flask = Flask(__name__)

# TELEGRAM_BOT_TOKEN = "7684211093:AAGbkCPukH3pu4PCFTV33w8oNN2Mf_VsWZ0"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
# WEBHOOK_PATH = "/webhook"  # –ü—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞
# WEBHOOK_URL = "https://marselito1.ngrok.dev"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π URL

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# bot = Bot(token=TELEGRAM_BOT_TOKEN)
import asyncio
import threading
from flask import Flask, request
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes
)
import logging

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
CHOOSING, ORDER_TRANSPORT, TRACK_SHIPMENT, REQUEST_RATES, FAQ, FEEDBACK = range(6)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app_flask = Flask(__name__)

# TELEGRAM_BOT_TOKEN = "7684211093:AAHgH07SFnVn6kkpSmEOH4svLxYLOSZFCSo"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
# WEBHOOK_PATH = "/webhook"  # –ü—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞
# WEBHOOK_URL = "https://marselito1.ngrok.dev"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π URL


# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –∏ URL
TELEGRAM_BOT_TOKEN = "7684211093:AAGbkCPukH3pu4PCFTV33w8oNN2Mf_VsWZ0"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
WEBHOOK_URL = "https://marselito1.ngrok.dev/webhook"   # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π URL
# WEBHOOK_URL = "https://abc123.ngrok.io/webhook"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π URL —Å /webhook


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?\n"
        "1. –ó–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n"
        "2. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞\n"
        "3. –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö\n"
        "4. –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)\n"
        "5. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
    )
    return CHOOSING

# –ó–∞–∫–∞–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
async def order_transport_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    return ORDER_TRANSPORT

async def ask_destination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['origin'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
    return TRACK_SHIPMENT

async def ask_date_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['destination'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-10-10 14:30):")
    return REQUEST_RATES

async def ask_cargo_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['date_time'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –≥—Ä—É–∑–∞ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä, —Ç–æ–Ω–Ω–∞–∂, –æ–±—ä–µ–º):")
    return FAQ

async def finish_order_transport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['cargo_info'] = update.message.text
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å! –ú—ã —É–∂–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø–æ–∏—Å–∫–æ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏. "
        "–°–∫–æ—Ä–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
    )
    return ConversationHandler.END

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞
async def track_shipment_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    return TRACK_SHIPMENT

async def provide_shipment_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    shipment_number = update.message.text
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏
    await update.message.reply_text(
        f"–í–∞—à –∑–∞–ø—Ä–æ—Å –æ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ —Å –Ω–æ–º–µ—Ä–æ–º {shipment_number} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. "
        "–í—Å–∫–æ—Ä–µ –º—ã –ø–æ–¥–µ–ª–∏–º—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
    )
    return ConversationHandler.END

# –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
async def request_rates_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞—Ä–∏—Ñ–æ–≤:")
    return REQUEST_RATES

async def ask_destination_for_rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['origin_rates'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
    return REQUEST_RATES

async def provide_rate_estimate_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['destination_rates'] = update.message.text
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å! –ú—ã —É–∂–µ –≤–µ–¥–µ–º –ø—Ä–æ—Å—á–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏. "
        "–°–∫–æ—Ä–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
    )
    return ConversationHandler.END

# –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)
async def faq_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "1. –ö–∞–∫ —è –º–æ–≥—É –æ—Ç—Å–ª–µ–¥–∏—Ç—å –º–æ–π –≥—Ä—É–∑?\n"
        "2. –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏?\n"
        "3. –ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏?\n"
        "4. –ö–∞–∫–∏–µ —Ç–∏–ø—ã –≥—Ä—É–∑–æ–≤ –≤—ã –ø–µ—Ä–µ–≤–æ–∑–∏—Ç–µ?\n"
        "5. –ö–∞–∫–æ–≤—ã —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏?\n"
        "6. –ú–æ–≥—É –ª–∏ —è –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?\n"
        "7. –ö–∞–∫ —è –º–æ–≥—É –æ–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥–∏?"
    )
    return ConversationHandler.END

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåü –í–∞—à–µ –º–Ω–µ–Ω–∏–µ ‚Äî –Ω–∞—à –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä! üåü\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ –∏–ª–∏ –æ —Ç–æ–º, –∫–∞–∫ –º—ã –º–æ–∂–µ–º —Å—Ç–∞—Ç—å –µ—â–µ –ª—É—á—à–µ."
    )
    return FEEDBACK

async def receive_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    feedback = update.message.text
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –µ—â–µ, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /start.')
    return ConversationHandler.END

# –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler
conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        CHOOSING: [
            MessageHandler(filters.Regex("^1$"), order_transport_start),
            MessageHandler(filters.Regex("^2$"), track_shipment_start),
            MessageHandler(filters.Regex("^3$"), request_rates_start),
            MessageHandler(filters.Regex("^4$"), faq_handler),
            MessageHandler(filters.Regex("^5$"), feedback_start),
        ],
        ORDER_TRANSPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_destination)],
        TRACK_SHIPMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, provide_shipment_status)],
        REQUEST_RATES: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, ask_destination_for_rates),
            MessageHandler(filters.TEXT & ~filters.COMMAND, provide_rate_estimate_info)
        ],
        FAQ: [MessageHandler(filters.TEXT & ~filters.COMMAND, faq_handler)],
        FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_feedback)],
    },
    fallbacks=[CommandHandler('cancel', cancel)]
)

application.add_handler(conv_handler)

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π event loop –¥–ª—è –±–æ—Ç–∞
bot_loop = asyncio.new_event_loop()

def run_bot():
    asyncio.set_event_loop(bot_loop)
    bot_loop.run_until_complete(application.initialize())
    bot_loop.run_until_complete(application.start())
    bot_loop.run_until_complete(application.bot.set_webhook(WEBHOOK_URL))
    bot_loop.run_forever()

# –ú–∞—Ä—à—Ä—É—Ç Flask –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
@app_flask.route('/webhook', methods=['POST'])
def webhook_handler():
    if request.method == "POST":
        update = Update.de_json(request.get_json(force=True), application.bot)
        # –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ event loop –±–æ—Ç–∞
        asyncio.run_coroutine_threadsafe(application.process_update(update), bot_loop)
        return 'OK'
    else:
        return 'Method Not Allowed', 405

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 5003
    app_flask.run(port=5003)
