import logging
import os
import time
import random
from dotenv import load_dotenv
from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG,  # –£—Ä–æ–≤–µ–Ω—å DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    handlers=[
        logging.FileHandler("bot.log"),  # –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª
        logging.StreamHandler()          # –õ–æ–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
(
    CHOOSING,
    CONFIRMATION,
    ORDER_TRANSPORT_ORIGIN,
    ORDER_TRANSPORT_DESTINATION,
    ORDER_TRANSPORT_DATETIME,
    ORDER_TRANSPORT_CARGO,
    FEEDBACK_TEXT,
    ADMIN_MENU
) = range(8)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ order_id
def generate_order_id():
    timestamp = int(time.time())
    random_number = random.randint(1000, 9999)
    return f"{timestamp}{random_number}"

# –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram —Ç–æ–∫–µ–Ω–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_TELEGRAM_IDS = os.getenv("ADMIN_TELEGRAM_IDS")
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
ADMIN_TELEGRAM_IDS = [int(admin_id.strip()) for admin_id in ADMIN_TELEGRAM_IDS.split(',')]

logger.info(f"ADMIN_TELEGRAM_IDS: {ADMIN_TELEGRAM_IDS}")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫
orders = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    keyboard = [
        [KeyboardButton("üöö –ó–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")],
        [KeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã (–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫)")],
        [KeyboardButton("üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö")],
        [KeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)"), KeyboardButton("üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")],
        [KeyboardButton("üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
def create_submenu():
    keyboard = [
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
def create_confirmation_menu():
    keyboard = [
        [KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = create_main_menu()
    logger.info("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –≥—Ä—É–∑–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    return CHOOSING

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=create_main_menu()
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
async def choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    logger.debug(f"–í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {choice}")

    if choice == "üöö –ó–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        keyboard = create_confirmation_menu()
        await update.message.reply_text(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?",
            reply_markup=keyboard
        )
        context.user_data['current_action'] = 'order_transport'
        return CONFIRMATION

    elif choice == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã (–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫)":
        user_id = update.effective_user.id
        user_orders = orders.get(user_id, [])
        if not user_orders:
            await update.message.reply_text(
                "üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
                parse_mode='Markdown',
                reply_markup=create_main_menu()
            )
        else:
            message = "üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n"
            for order in user_orders:
                message += (
                    f"*ID –∑–∞–∫–∞–∑–∞:* {order['order_id']}\n"
                    f"‚Ä¢ *–û—Ç–∫—É–¥–∞:* {order['origin']}\n"
                    f"‚Ä¢ *–ö—É–¥–∞:* {order['destination']}\n"
                    f"‚Ä¢ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {order['date_time']}\n"
                    f"‚Ä¢ *–¢–∏–ø –≥—Ä—É–∑–∞:* {order['cargo_info']}\n\n"
                )
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=create_main_menu()
            )
        return ConversationHandler.END

    elif choice == "üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö":
        await update.message.reply_text(
            "üí∞ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö:*\n\n"
            "–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤:\n"
            "1. –¢–∏–ø –≥—Ä—É–∑–∞\n"
            "2. –¢–æ–Ω–Ω–∞–∂\n"
            "3. –û–±—ä–µ–º\n"
            "4. –ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
            "5. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞—è–≤–∫—É.",
            parse_mode='Markdown',
            reply_markup=create_submenu()
        )
        return ConversationHandler.END

    elif choice == "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)":
        await update.message.reply_text(
            "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ):*\n\n"
            "1. –ö–∞–∫ —è –º–æ–≥—É –æ—Ç—Å–ª–µ–¥–∏—Ç—å –º–æ–π –≥—Ä—É–∑?\n"
            "2. –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏?\n"
            "3. –ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏?\n"
            "4. –ö–∞–∫–∏–µ —Ç–∏–ø—ã –≥—Ä—É–∑–æ–≤ –≤—ã –ø–µ—Ä–µ–≤–æ–∑–∏—Ç–µ?\n"
            "5. –ö–∞–∫–æ–≤—ã —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏?\n"
            "6. –ú–æ–≥—É –ª–∏ —è –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?\n"
            "7. –ö–∞–∫ —è –º–æ–≥—É –æ–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥–∏?",
            parse_mode='Markdown',
            reply_markup=create_submenu()
        )
        return ConversationHandler.END

    elif choice == "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
        await update.message.reply_text(
            "üåü –í–∞—à–µ –º–Ω–µ–Ω–∏–µ ‚Äî –Ω–∞—à –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä! üåü\n\n"
            "–î–æ—Ä–æ–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å—Ç–∞—Ç—å –¥–ª—è –≤–∞—Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞–º–∏, –Ω–æ –±–µ–∑ –≤–∞—à–µ–≥–æ –º–Ω–µ–Ω–∏—è –Ω–∞–º –Ω–µ –æ–±–æ–π—Ç–∏—Å—å! ü§îüí¨\n\n"
            "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É? –ú—ã –≥–æ—Ç–æ–≤—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–∏ –º—ã—Å–ª–∏, –∏–¥–µ–∏ –∏ –¥–∞–∂–µ –∫—Ä–∏—Ç–∏–∫—É! –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã ‚Äî —ç—Ç–æ –∫–∞–∫ –∑–≤–µ–∑–¥—ã –Ω–∞ –Ω–∞—à–µ–º –Ω–µ–±–æ—Å–∫–ª–æ–Ω–µ: –æ–Ω–∏ –æ—Å–≤–µ—â–∞—é—Ç –ø—É—Ç—å –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É. ‚ú®\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ –∏–ª–∏ –æ —Ç–æ–º, –∫–∞–∫ –º—ã –º–æ–∂–µ–º —Å—Ç–∞—Ç—å –µ—â–µ –ª—É—á—à–µ. –ö–∞–∂–¥—ã–π –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî —ç—Ç–æ —à–∞–≥ –∫ –Ω–æ–≤—ã–º –≤–µ—Ä—à–∏–Ω–∞–º!\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üíñ",
            parse_mode='Markdown',
            reply_markup=create_submenu()
        )
        return FEEDBACK_TEXT

    elif choice == "üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é":
        if update.effective_user.id in ADMIN_TELEGRAM_IDS:
            await update.message.reply_text(
                "üîß *–ê–¥–º–∏–Ω-–º–µ–Ω—é:*\n\n"
                "1. `/notify <order_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>` ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
                "2. `/view_orders` ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã.",
                parse_mode='Markdown',
                reply_markup=create_submenu()
            )
        else:
            await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.", reply_markup=create_main_menu())
        return ConversationHandler.END

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=create_main_menu())
        return CHOOSING

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–î–∞/–ù–µ—Ç)
async def confirmation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    logger.debug(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {choice}")

    if choice == "–î–∞":
        await update.message.reply_text(
            "üöö –ó–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:\n–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=create_submenu()
        )
        return ORDER_TRANSPORT_ORIGIN
    elif choice == "–ù–µ—Ç":
        await update.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=create_main_menu()
        )
        return CHOOSING
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.",
            reply_markup=create_confirmation_menu()
        )
        return CONFIRMATION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def ask_origin_transport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ù–∞–∑–∞–¥":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥'. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await update.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=create_main_menu()
        )
        return CHOOSING

    origin = update.message.text
    context.user_data['origin'] = origin
    logger.debug(f"–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {origin}")
    await update.message.reply_text(
        "üöö –ó–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:\n–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=create_submenu()
    )
    return ORDER_TRANSPORT_DESTINATION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
async def ask_destination_transport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ù–∞–∑–∞–¥":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥'. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await update.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=create_main_menu()
        )
        return CHOOSING

    destination = update.message.text
    context.user_data['destination'] = destination
    logger.debug(f"–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {destination}")
    await update.message.reply_text(
        "üöö –ó–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-10-10 14:30):",
        reply_markup=create_submenu()
    )
    return ORDER_TRANSPORT_DATETIME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
async def ask_datetime_transport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ù–∞–∑–∞–¥":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥'. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await update.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=create_main_menu()
        )
        return CHOOSING

    date_time = update.message.text
    context.user_data['date_time'] = date_time
    logger.debug(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {date_time}")
    await update.message.reply_text(
        "üöö –ó–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:\n–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –≥—Ä—É–∑–∞ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä –≥—Ä—É–∑–∞, —Ç–æ–Ω–Ω–∞–∂, –æ–±—ä–µ–º):",
        reply_markup=create_submenu()
    )
    return ORDER_TRANSPORT_CARGO

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def finish_order_transport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ù–∞–∑–∞–¥":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥'. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await update.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=create_main_menu()
        )
        return CHOOSING

    cargo_info = update.message.text
    context.user_data['cargo_info'] = cargo_info
    logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ: {cargo_info}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–∫–∞–∑–∞
    order_id = generate_order_id()
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ID –∑–∞–∫–∞–∑–∞: {order_id}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
    user_id = update.effective_user.id
    if user_id not in orders:
        orders[user_id] = []
    orders[user_id].append({
        'order_id': order_id,
        'origin': context.user_data['origin'],
        'destination': context.user_data['destination'],
        'date_time': context.user_data['date_time'],
        'cargo_info': context.user_data['cargo_info']
    })

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É(–∞–º)
    admin_message = (
        f"üì£ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n"
        f"*ID –∑–∞–∫–∞–∑–∞:* {order_id}\n"
        f"*–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {context.user_data['origin']}\n"
        f"*–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:* {context.user_data['destination']}\n"
        f"*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {context.user_data['date_time']}\n"
        f"*–¢–∏–ø –≥—Ä—É–∑–∞:* {context.user_data['cargo_info']}\n"
        f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{update.message.from_user.username or update.message.from_user.full_name} (ID: {update.message.from_user.id})"
    )

    for admin_id in ADMIN_TELEGRAM_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                parse_mode='Markdown'
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å ID {admin_id}")
        except telegram.error.BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID {admin_id}): {e}")
            await update.message.reply_text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END

    await update.message.reply_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å! –ú—ã —É–∂–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø–æ–∏—Å–∫–æ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.\nüìÑ *–í–∞—à ID –∑–∞–∫–∞–∑–∞:* {order_id}",
        parse_mode='Markdown',
        reply_markup=create_main_menu()
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
async def receive_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=create_main_menu()
        )
        return CHOOSING  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    feedback = text
    user = update.message.from_user.username or update.message.from_user.full_name
    admin_feedback_message = (
        f"üìù *–ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user}:*\n"
        f"{feedback}"
    )
    try:
        for admin_id in ADMIN_TELEGRAM_IDS:
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_feedback_message,
                parse_mode='Markdown'
            )
        logger.info("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except telegram.error.BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        await update.message.reply_text(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—ë–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
        reply_markup=create_main_menu()
    )
    return ConversationHandler.END


# –ö–æ–º–∞–Ω–¥–∞ /notify –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def notify_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.effective_user.id not in ADMIN_TELEGRAM_IDS:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /notify <order_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
            return

        order_id = args[0]
        message = ' '.join(args[1:])

        # –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ order_id
        user_id = None
        for uid, user_orders in orders.items():
            for order in user_orders:
                if order['order_id'] == order_id:
                    user_id = uid
                    break
            if user_id:
                break

        if not user_id:
            await update.message.reply_text(f"‚ùå –ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await context.bot.send_message(chat_id=user_id, text=message)
        await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID –∑–∞–∫–∞–∑–∞ {order_id}.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /view_orders –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_TELEGRAM_IDS:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    if not orders:
        await update.message.reply_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    else:
        message = "üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:*\n\n"
        for user_id, user_orders in orders.items():
            for order in user_orders:
                message += (
                    f"*ID –∑–∞–∫–∞–∑–∞:* {order['order_id']}\n"
                    f"‚Ä¢ *–û—Ç–∫—É–¥–∞:* {order['origin']}\n"
                    f"‚Ä¢ *–ö—É–¥–∞:* {order['destination']}\n"
                    f"‚Ä¢ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {order['date_time']}\n"
                    f"‚Ä¢ *–¢–∏–ø –≥—Ä—É–∑–∞:* {order['cargo_info']}\n\n"
                )
        await update.message.reply_text(message, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥")
# –£–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é receive_feedback

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def test_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        for admin_id in ADMIN_TELEGRAM_IDS:
            await context.bot.send_message(chat_id=admin_id, text="üì£ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    except telegram.error.BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /repeat –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def repeat_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîÑ –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu()
    )
    return CHOOSING

# –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler
conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start), MessageHandler(filters.ALL & ~filters.COMMAND, start)],
    states={
        CHOOSING: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, choice_handler)
        ],
        CONFIRMATION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, confirmation_handler)
        ],
        ORDER_TRANSPORT_ORIGIN: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, ask_origin_transport)
        ],
        ORDER_TRANSPORT_DESTINATION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, ask_destination_transport)
        ],
        ORDER_TRANSPORT_DATETIME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, ask_datetime_transport)
        ],
        ORDER_TRANSPORT_CARGO: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, finish_order_transport)
        ],
        FEEDBACK_TEXT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_feedback)
        ],
        ADMIN_MENU: [
            CommandHandler('notify', notify_user),
            CommandHandler('view_orders', view_orders),
            MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), start)
        ],
    },
    fallbacks=[CommandHandler('cancel', cancel)],
    per_user=True
)

if __name__ == '__main__':
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ConversationHandler
    application.add_handler(conv_handler)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('test', test_message))  # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    application.add_handler(CommandHandler('repeat', repeat_application))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()
